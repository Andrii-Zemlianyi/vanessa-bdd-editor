//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Служебная функция.
Функция ДобавитьШагВМассивТестов(МассивТестов,Снипет,ИмяПроцедуры,ПредставлениеТеста = Неопределено,Транзакция = Неопределено,Параметр = Неопределено)
	Структура = Новый Структура;
	Структура.Вставить("Снипет",Снипет);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ПредставлениеТеста",ПредставлениеТеста);
	Структура.Вставить("Транзакция",Транзакция);
	Структура.Вставить("Параметр",Параметр);
	МассивТестов.Добавить(Структура);
КонецФункции

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	ДобавитьШагВМассивТестов(ВсеТесты,"ЯОткрываюФормуРедактора()","ЯОткрываюФормуРедактора","Когда я открываю форму редактора");
	ДобавитьШагВМассивТестов(ВсеТесты,"ФормаРедактораОткрывается()","ФормаРедактораОткрывается","Тогда форма редактора открывается");
	ДобавитьШагВМассивТестов(ВсеТесты,"ФормаРедактораОткрыта()","ФормаРедактораОткрыта","Допустим форма редактора открыта");
	ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюФормуРедактора()","ЯЗакрываюФормуРедактора","Когда я закрываю форму редактора");
	ДобавитьШагВМассивТестов(ВсеТесты,"ФормаРедактораЗакрывается()","ФормаРедактораЗакрывается","Тогда форма редактора закрывается");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	КонтекстСохраняемый.Вставить("ПутьКОбработке", ПолучитьПутьКОбработке());
	КонтекстСохраняемый.Вставить("УИН", Новый УникальныйИдентификатор());
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

///////////////////////////////////////////////////

&НаСервере
Функция ПолучитьПутьКОбработке() 
	Возврат Константы.ПутьКОбработке.Получить();
КонецФункции

&НаКлиенте
Функция ПолучитьФормуОбработкиПоКлючуУникальности(КлючУникальности) 
	ИскомаяФорма = Неопределено;
	
	ОткрытыеОкна = ПолучитьОкна();
	Для Каждого ОткрытоеОкно Из ОткрытыеОкна Цикл
		СодержимоеОкна = ОткрытоеОкно.Содержимое;
		Если СодержимоеОкна.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого УправляемаяФорма Из СодержимоеОкна Цикл
			Если УправляемаяФорма.КлючУникальности = КлючУникальности Тогда
				ИскомаяФорма = УправляемаяФорма;
				
				Возврат ИскомаяФорма;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ИскомаяФорма;
КонецФункции

///////////////////////////////////////////////////

&НаКлиенте
//Когда я открываю форму редактора
//@ЯОткрываюФормуРедактора()
Процедура ЯОткрываюФормуРедактора() Экспорт
	ИмяОбработки = Ванесса.ПодключитьВнешнююОбработкуКлиент(КонтекстСохраняемый.ПутьКОбработке);
	ФормаОбработки = ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма.ФормаУправляемая",,,Истина);
	
	ФормаОбработки.КлючУникальности = КонтекстСохраняемый.УИН;
	
	ФормаОбработки.Открыть();
КонецПроцедуры

&НаКлиенте
//Тогда форма редактора открывается
//@ФормаРедактораОткрывается()
Процедура ФормаРедактораОткрывается() Экспорт
	Если ПолучитьФормуОбработкиПоКлючуУникальности(КонтекстСохраняемый.УИН) = Неопределено Тогда
		ВызватьИсключение "Форма редактора не открылась";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
//Когда я закрываю форму редактора
//@ЯЗакрываюФормуРедактора()
Процедура ЯЗакрываюФормуРедактора() Экспорт
	ФормаРедактора = ПолучитьФормуОбработкиПоКлючуУникальности(КонтекстСохраняемый.УИН);

	ФормаРедактора.Закрыть();
КонецПроцедуры

&НаКлиенте
//Тогда форма редактора закрывается
//@ФормаРедактораЗакрывается()
Процедура ФормаРедактораЗакрывается() Экспорт
	Если Не ПолучитьФормуОбработкиПоКлючуУникальности(КонтекстСохраняемый.УИН) = Неопределено Тогда
		ВызватьИсключение "Форма редактора не закрылась";
	КонецЕсли;
КонецПроцедуры

//окончание текста модуля