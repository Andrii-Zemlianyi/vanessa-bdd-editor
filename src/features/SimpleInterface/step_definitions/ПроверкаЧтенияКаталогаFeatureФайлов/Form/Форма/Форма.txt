//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Служебная функция.
Функция ДобавитьШагВМассивТестов(МассивТестов,Снипет,ИмяПроцедуры,ПредставлениеТеста = Неопределено,Транзакция = Неопределено,Параметр = Неопределено)
	Структура = Новый Структура;
	Структура.Вставить("Снипет",Снипет);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ПредставлениеТеста",ПредставлениеТеста);
	Структура.Вставить("Транзакция",Транзакция);
	Структура.Вставить("Параметр",Параметр);
	МассивТестов.Добавить(Структура);
КонецФункции

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	ДобавитьШагВМассивТестов(ВсеТесты,"ВДеревеКаталоговИФайловКоличествоСтрокРавно(Парам01)","ВДеревеКаталоговИФайловКоличествоСтрокРавно","Допустим в дереве каталогов и файлов количество строк равно 0");
	ДобавитьШагВМассивТестов(ВсеТесты,"ВПолеВыбораКаталогаFeatureФайловУказываюПуть()","ВПолеВыбораКаталогаFeatureФайловУказываюПуть","Когда в поле выбора каталога feature файлов указываю путь");
	ДобавитьШагВМассивТестов(ВсеТесты,"НажимаюНаКнопкуОбновления()","НажимаюНаКнопкуОбновления","И нажимаю на кнопку обновления");
	ДобавитьШагВМассивТестов(ВсеТесты,"ВДеревеКаталоговИФайловКоличествоСтрокНеРавно(Парам01)","ВДеревеКаталоговИФайловКоличествоСтрокНеРавно","Тогда в дереве каталогов и файлов количество строк не равно 0");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Допустим в дереве каталогов и файлов количество строк равно 0
//@ВДеревеКаталоговИФайловКоличествоСтрокРавно(Парам01)
Процедура ВДеревеКаталоговИФайловКоличествоСтрокРавно(КоличествоСтрок) Экспорт
	ТестируемаяТаблицаФормы = КонтекстСохраняемый.ТестируемаяФорма.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"),, "РежимыИнтерфейса_Простой_Проводник");
	Если ТестируемаяТаблицаФормы = Неопределено Тогда
		ВызватьИсключение "Тестируемая таблица формы не найдена.";
		
	КонецЕсли;
	
	ТестируемаяТаблицаФормы.Активизировать();
	ТестируемаяТаблицаФормы.ВыделитьВсеСтроки();
	
	ВыделенныеСтроки = ТестируемаяТаблицаФормы.ПолучитьВыделенныеСтроки();
	Если Не ВыделенныеСтроки.Количество() = КоличествоСтрок Тогда
		ВызватьИсключение "Есть строки в дереве каталогов и файлов";
	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
//Когда в поле выбора каталога feature файлов указываю путь
//@ВПолеВыбораКаталогаFeatureФайловУказываюПуть()
Процедура ВПолеВыбораКаталогаFeatureФайловУказываюПуть() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//И нажимаю на кнопку обновления
//@НажимаюНаКнопкуОбновления()
Процедура НажимаюНаКнопкуОбновления() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//Тогда в дереве каталогов и файлов количество строк не равно 0
//@ВДеревеКаталоговИФайловКоличествоСтрокНеРавно(Парам01)
Процедура ВДеревеКаталоговИФайловКоличествоСтрокНеРавно(КоличествоСтрок) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

//окончание текста модуля