{3,
{42,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,0,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},0,"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",0,0,0,0,0,0,3,3,0,0,0},"//начало текста модуля

#Область Служебные_функции_и_процедуры

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Служебная функция.
Функция ДобавитьШагВМассивТестов(МассивТестов,Снипет,ИмяПроцедуры,ПредставлениеТеста = Неопределено,Транзакция = Неопределено,Параметр = Неопределено)
	Структура = Новый Структура;
	Структура.Вставить(""Снипет"",Снипет);
	Структура.Вставить(""ИмяПроцедуры"",ИмяПроцедуры);
	Структура.Вставить(""ИмяПроцедуры"",ИмяПроцедуры);
	Структура.Вставить(""ПредставлениеТеста"",ПредставлениеТеста);
	Структура.Вставить(""Транзакция"",Транзакция);
	Структура.Вставить(""Параметр"",Параметр);
	МассивТестов.Добавить(Структура);
КонецФункции

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	ДобавитьШагВМассивТестов(ВсеТесты,""ВПолеУказанВременныйКаталог1СЧерезМетодПолучитьИмяВременногоКаталогаНаВремяСессииПроверки(Парам01)"",""ВПолеУказанВременныйКаталог1СЧерезМетодПолучитьИмяВременногоКаталогаНаВремяСессииПроверки"",""И в поле """"СтруктураДляЗагрузки"""" указан временный каталог 1С через метод ПолучитьИмяВременногоКаталога на время сессии проверки"");
	ДобавитьШагВМассивТестов(ВсеТесты,""УдаляемЕслиСуществуетФайлВнутриВременногоКаталогаВПапке(Парам01,Парам02)"",""УдаляемЕслиСуществуетФайлВнутриВременногоКаталогаВПапке"",""И Удаляем если существует файл """"СозданиеФича_ФайлаПоКнопке.feature"""" внутри временного каталога в папке """"Drafts"""""");
	ДобавитьШагВМассивТестов(ВсеТесты,""ВОткрытойФормеВТЧПустойСписокФича_файловИзВременногоКаталога(Парам01)"",""ВОткрытойФормеВТЧПустойСписокФича_файловИзВременногоКаталога"",""Тогда В открытой форме в ТЧ """"ТЗОбработкаТребований"""" пустой список фича-файлов из временного каталога"");
	ДобавитьШагВМассивТестов(ВсеТесты,""СоздаетсяФича_файлВнутриВременногоКаталогаВПапке(Парам01,Парам02)"",""СоздаетсяФича_файлВнутриВременногоКаталогаВПапке"",""Тогда создается фича-файл """"СозданиеФича_файлаПоКнопке.feature"""" внутри временного каталога в папке """"Drafts"""""");
	ДобавитьШагВМассивТестов(ВсеТесты,""ФайлИдентиченФайлу(Парам01,Парам02)"",""ФайлИдентиченФайлу"",""И файл """"СозданиеФича_файлаПоКнопке.feature"""" идентичен файлу """".spec\fixtures\СозданиеФича_файлаПоКнопкеЭталон.feature"""""");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

#КонецОбласти



#Область Работа_со_сценариями

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеФункции
&НаКлиенте
Функция НайтиФормыТекущегоОкна() Экспорт
	ОкноПриложения         = ПолучитьАктивноеОкноИзТестовоеПриложение();
	МассивФорм             = ОкноПриложения.НайтиОбъекты(Тип(""ТестируемаяФорма""));
	Возврат МассивФорм;
КонецФункции	

&НаКлиенте
Процедура ВОткрытойФормеЯИзменяюФлагСЗаголовком(ИмяРеквизита,ИскатьПоИмени = Ложь) Экспорт
	//ОкноПриложения         = ПолучитьАктивноеОкноИзКонтекста();
	//ТекущаяФорма           = ОкноПриложения.НайтиОбъект(Тип(""ТестируемаяФорма""));
	
	Нашли = Ложь;
	МассивФорм = НайтиФормыТекущегоОкна();
	Для каждого ТекущаяФорма Из МассивФорм Цикл
		
		Если ИскатьПоИмени Тогда
			ПолеРеквизит = ТекущаяФорма.НайтиОбъект(Тип(""ТестируемоеПолеФормы""),, ИмяРеквизита);
		Иначе
			ПолеРеквизит = ТекущаяФорма.НайтиОбъект(Тип(""ТестируемоеПолеФормы""), ИмяРеквизита);
		КонецЕсли;	 
		
		
		Если ПолеРеквизит = Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		ПолеРеквизит.Активизировать();
		ПолеРеквизит.УстановитьОтметку();
		
		
		Нашли = Истина;
		Прервать;
	КонецЦикла;
	
	Если НЕ Нашли Тогда
		Если ИскатьПоИмени Тогда
			Стр = ""Флаг с именем <"" + ИмяРеквизита + ""> не найден!"";
		Иначе	
			Стр = ""Флаг с заголовоком <"" + ИмяРеквизита + ""> не найден!"";
		КонецЕсли;	 
		
		Сообщить(Стр);
		ВызватьИсключение Стр;
	КонецЕсли;	 

	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьАктивноеОкноИзТестовоеПриложение()
	Возврат КонтекстСохраняемый.ТестовоеПриложение.ПолучитьАктивноеОкно();
КонецФункции	

&НаКлиенте
Функция НайтиТекущуюФорму() Экспорт
	
	Возврат Контекст.АктивноеОкно.НайтиОбъект(Тип(""ТестируемаяФорма""));
	
КонецФункции	

&НаКлиенте
Функция НайтиРеквизитФормы(ИмяРеквизита) Экспорт
	ТекущаяФорма=НайтиТекущуюФорму();
	Возврат ТекущаяФорма.НайтиОбъект(Тип(""ТестируемоеПолеФормы""),, ИмяРеквизита);
	
КонецФункции	

&НаКлиенте
Функция НайтиТЧФормы(ИмяТЧ) Экспорт
	ТекущаяФорма=НайтиТекущуюФорму();
	Возврат ТекущаяФорма.НайтиОбъект(Тип(""ТестируемаяТаблицаФормы""),,ИмяТЧ);
	
КонецФункции	

#КонецОбласти

///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//И в поле ""СтруктураДляЗагрузки"" указан временный каталог 1С через метод ПолучитьИмяВременногоКаталога на время сессии проверки
//@ВПолеУказанВременныйКаталог1СЧерезМетодПолучитьИмяВременногоКаталогаНаВремяСессииПроверки(Парам01)
Процедура ВПолеУказанВременныйКаталог1СЧерезМетодПолучитьИмяВременногоКаталогаНаВремяСессииПроверки(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение ""Не реализовано."";
	ВременныйКаталог=КаталогВременныхФайлов()+""Temp"";
	Темп=Новый Файл(ВременныйКаталог);
	//Вызватьисключение ВременныйКаталог;
	Если НЕ Темп.Существует() Тогда
		СоздатьКаталог(ВременныйКаталог);
		Возврат;
	КонецЕсли;	
	ТекущаяФорма=НайтиТекущуюФорму();
	Эл = ТекущаяФорма.НайтиОбъект(,,Парам01);
	Эл.Активизировать();
	Эл.ВвестиТекст(ВременныйКаталог);
	Ванесса.ПроверитьРавенство(Эл.ПолучитьТекстРедактирования(),ВременныйКаталог);
	
КонецПроцедуры

&НаКлиенте
//И Удаляем если существует файл ""СозданиеФича_ФайлаПоКнопке.feature"" внутри временного каталога в папке ""Drafts""
//@УдаляемЕслиСуществуетФайлВнутриВременногоКаталогаВПапке(Парам01,Парам02)
Процедура УдаляемЕслиСуществуетФайлВнутриВременногоКаталогаВПапке(Парам01,Парам02) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
//	ВызватьИсключение ""Не реализовано."";
	ИмяОжидаемогоФайла=КаталогВременныхФайлов()+""Temp""+""\""+Парам02+""\""+Парам01;
	Ванесса.Отладка(""Файл - ""+ИмяОжидаемогоФайла);
	Контекст.Вставить(""ИмяОжидаемогоФайла"",ИмяОжидаемогоФайла);
	ФайлСуществует = Ванесса.ФайлСуществуетКомандаСистемы(ИмяОжидаемогоФайла);
	Ванесса.Отладка(""Файл - ""+ФайлСуществует);
	Если ФайлСуществует Тогда
		Ванесса.УдалитьФайлыКомандаСистемы(ИмяОжидаемогоФайла);
	КонецЕсли;	 
	
	ФайлСуществует = Ванесса.ФайлСуществуетКомандаСистемы(ИмяОжидаемогоФайла);
	Ванесса.Отладка(""Файл - ""+ФайлСуществует);
	Ванесса.ПроверитьНеРавенство(ФайлСуществует,Истина,""В этот момент Файл "" + ИмяОжидаемогоФайла + "" НЕ должен существовать."");
КонецПроцедуры

&НаКлиенте
//Тогда В открытой форме в ТЧ ""ТЗОбработкаТребований"" пустой список фича-файлов из временного каталога
//@ВОткрытойФормеВТЧПустойСписокФича_файловИзВременногоКаталога(Парам01)
Процедура ВОткрытойФормеВТЧПустойСписокФича_файловИзВременногоКаталога(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение ""Не реализовано."";
КонецПроцедуры

&НаКлиенте
//Тогда создается фича-файл ""СозданиеФича_файлаПоКнопке.feature"" внутри временного каталога в папке ""Drafts""
//@СоздаетсяФича_файлВнутриВременногоКаталогаВПапке(Парам01,Парам02)
Процедура СоздаетсяФича_файлВнутриВременногоКаталогаВПапке(Парам01,Парам02) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
//	ВызватьИсключение ""Не реализовано."";
	Фича=КаталогВременныхФайлов()+""Temp""+""\""+Парам02+""\""+Парам01;
//	ВызватьИсключение Фича;
	//Темп=Новый Файл(Фича);
	ФайлСуществует = Ванесса.ФайлСуществуетКомандаСистемы(Фича);
	//Если НЕ Темп.Существует() Тогда
	Если НЕ ФайлСуществует Тогда
		ВызватьИсключение ""Файл не создан! ""+Фича;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
//И файл ""СозданиеФича_файлаПоКнопке.feature"" идентичен файлу "".spec\fixtures\СозданиеФича_файлаПоКнопкеЭталон.feature""
//@ФайлИдентиченФайлу(Парам01,Парам02)
Процедура ФайлИдентиченФайлу(Парам01,Парам02) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
//	ВызватьИсключение ""Не реализовано."";
	ТекущаяФорма=НайтиТекущуюФорму();
	Эл = ТекущаяФорма.НайтиОбъект(,,""КаталогBDDEditor"");
	Эталон=Эл.ПолучитьПредставлениеДанных()+Парам02;//+Прав(Парам02,СтрДлина(Парам02)-1);
	Фича=КаталогВременныхФайлов()+""Temp""+""\Drafts\""+Парам01;
	ТекстФичи="""";
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(Фича,""UTF-8"");
	ТекстФичи=Текст.Прочитать();
	Текст.Закрыть();
	ТекстЭталона="""";
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(Фича,""UTF-8"");
	ТекстЭталона=Текст.Прочитать();
	Текст.Закрыть();
	Ванесса.ПроверитьРавенство(ТекстЭталона,ТекстФичи);
	

КонецПроцедуры

//окончание текста модуля",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",1fa267af-3d54-4f70-ac00-718486d7aafd}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}